{
  "version": 3,
  "sources": ["../../two.js/src/events.js", "../../two.js/src/vector.js"],
  "sourcesContent": ["/**\n * @name Two.Events\n * @class\n * @description Object inherited by many Two.js objects in order to facilitate custom events.\n */\nexport class Events {\n\n  _events = {};\n  _bound = false;\n\n  constructor() {}\n\n  /**\n   * @name Two.Events#addEventListener\n   * @function\n   * @param {String} [name] - The name of the event to bind a function to.\n   * @param {Function} [handler] - The function to be invoked when the event is dispatched.\n   * @description Call to add a listener to a specific event name.\n   */\n  addEventListener(name, handler) {\n\n    const list = this._events[name] || (this._events[name] = []);\n    list.push(handler);\n    this._bound = true;\n\n    return this;\n\n  }\n\n  /**\n   * @name Two.Events#on\n   * @function\n   * @description Alias for {@link Two.Events#addEventListener}.\n   */\n  on() {\n    return this.addEventListener.apply(this, arguments);\n  }\n  /**\n   * @name Two.Events#bind\n   * @function\n   * @description Alias for {@link Two.Events#addEventListener}.\n   */\n  bind() {\n    return this.addEventListener.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Events#removeEventListener\n   * @function\n   * @param {String} [name] - The name of the event intended to be removed.\n   * @param {Function} [handler] - The handler intended to be removed.\n   * @description Call to remove listeners from a specific event. If only `name` is passed then all the handlers attached to that `name` will be removed. If no arguments are passed then all handlers for every event on the obejct are removed.\n   */\n  removeEventListener(name, handler) {\n\n    if (!this._events) {\n      return this;\n    }\n    if (!name && !handler) {\n      this._events = {};\n      this._bound = false;\n      return this;\n    }\n\n    const names = name ? [name] : Object.keys(this._events);\n    for (let i = 0, l = names.length; i < l; i++) {\n\n      name = names[i];\n      let list = this._events[name];\n\n      if (list) {\n        let events = [];\n        if (handler) {\n          for (let j = 0, k = list.length; j < k; j++) {\n            let e = list[j];\n            e = e.handler ? e.handler : e;\n            if (handler !== e) {\n              events.push(e);\n            }\n          }\n        }\n        this._events[name] = events;\n      }\n    }\n\n    return this;\n\n  }\n\n  /**\n   * @name Two.Events#off\n   * @function\n   * @description Alias for {@link Two.Events#removeEventListener}.\n   */\n  off() {\n    return this.removeEventListener.apply(this, arguments);\n  }\n  /**\n   * @name Two.Events#unbind\n   * @function\n   * @description Alias for {@link Two.Events#removeEventListener}.\n   */\n  unbind() {\n    return this.removeEventListener.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Events#dispatchEvent\n   * @function\n   * @param {String} name - The name of the event to dispatch.\n   * @param args - Anything can be passed after the name and those will be passed on to handlers attached to the event in the order they are passed.\n   * @description Call to trigger a custom event. Any additional arguments passed after the name will be passed along to the attached handlers.\n   */\n  dispatchEvent(name) {\n\n    if (!this._events) {\n      return this;\n    }\n\n    const args = Array.prototype.slice.call(arguments, 1);\n    const events = this._events[name];\n\n    if (events) {\n      for (let i = 0; i < events.length; i++) {\n        events[i].call(this, ...args);\n      }\n    }\n\n    return this;\n\n  }\n\n  trigger() {\n    return this.dispatchEvent.apply(this, arguments);\n  }\n\n  listen(obj, name, handler) {\n\n    const scope = this;\n\n    if (obj) {\n\n      // Add references about the object that assigned this listener\n      e.obj = obj;\n      e.name = name;\n      e.handler = handler;\n\n      obj.on(name, e);\n\n    }\n\n    function e() {\n      handler.apply(scope, arguments);\n    }\n\n    return scope;\n\n  }\n\n  ignore(obj, name, handler) {\n\n    obj.off(name, handler);\n    return this;\n\n  }\n\n  /**\n   * @name Two.Events.Types\n   * @property {Object} - Object of different types of Two.js specific events.\n   */\n  static Types = {\n    play: 'play',\n    pause: 'pause',\n    update: 'update',\n    render: 'render',\n    resize: 'resize',\n    change: 'change',\n    remove: 'remove',\n    insert: 'insert',\n    order: 'order',\n    load: 'load'\n  }\n\n  static Methods = [\n    'addEventListener', 'on', 'removeEventListener', 'off', 'unbind',\n    'dispatchEvent', 'trigger', 'listen', 'ignore'\n  ];\n\n}\n", "import { Events } from './events.js';\n\nconst proto = {\n  x: {\n    enumerable: true,\n    get: function() {\n      return this._x;\n    },\n    set: function(v) {\n      if (this._x !== v) {\n        this._x = v;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  y: {\n    enumerable: true,\n    get: function() {\n      return this._y;\n    },\n    set: function(v) {\n      if (this._y !== v) {\n        this._y = v;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  }\n};\n\n/**\n * @name Two.Vector\n * @class\n * @extends Two.Events\n * @param {Number} [x=0] - Any number to represent the horizontal x-component of the vector.\n * @param {Number} [y=0] - Any number to represent the vertical y-component of the vector.\n * @description A class to store x / y component vector data. In addition to storing data `Two.Vector` has suped up methods for commonplace mathematical operations.\n */\nexport class Vector extends Events {\n\n  /**\n   * @name Two.Vector#_x\n   * @private\n   */\n  _x = 0;\n  /**\n   * @name Two.Vector#_y\n   * @private\n   */\n  _y = 0;\n\n  constructor(x = 0, y = 0) {\n\n    super();\n\n    for (let prop in proto) {\n      Object.defineProperty(this, prop, proto[prop]);\n    }\n\n    /**\n     * @name Two.Vector#x\n     * @property {Number} - The horizontal x-component of the vector.\n     * @type {Number}\n     */\n    this.x = x;\n\n    /**\n     * @name Two.Vector#y\n     * @property {Number} - The vertical y-component of the vector.\n     * @type {Number}\n     */\n    this.y = y;\n\n  }\n\n  /**\n   * @name Two.Vector.zero\n   * @readonly\n   * @property {Two.Vector} - Handy reference to a vector with component values 0, 0 at all times.\n   */\n  static zero = new Vector()\n\n  /**\n   * @name Two.Vector.left\n   * @readonly\n   * @property {Two.Vector} - Handy reference to a vector with component values -1, 0 at all times.\n   */\n  static left = new Vector(-1, 0)\n\n  /**\n   * @name Two.Vector.right\n   * @readonly\n   * @property {Two.Vector} - Handy reference to a vector with component values 1, 0 at all times.\n   */\n  static right = new Vector(1, 0)\n\n  /**\n   * @name Two.Vector.up\n   * @readonly\n   * @property {Two.Vector} - Handy reference to a vector with component values 0, -1 at all times.\n   */\n  static up = new Vector(0, -1)\n\n  /**\n   * @name Two.Vector.down\n   * @readonly\n   * @property {Two.Vector} - Handy reference to a vector with component values 0, 1 at all times.\n   */\n  static down = new Vector(0, 1)\n\n  /**\n   * @name Two.Vector.add\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Two.Vector}\n   * @description Add two vectors together.\n   */\n  static add(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n  }\n\n  /**\n   * @name Two.Vector.sub\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Two.Vector}\n   * @description Subtract two vectors: `v2` from `v1`.\n   */\n  static sub(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n  }\n\n  /**\n   * @name Two.Vector.subtract\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  static subtract(v1, v2) {\n    return Vector.sub(v1, v2);\n  }\n\n  /**\n   * @name Two.Vector.ratioBetween\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Number} The ratio betwen two points `v1` and `v2`.\n   */\n  static ratioBetween(v1, v2) {\n\n    return (v1.x * v2.x + v1.y * v2.y) / (v1.length() * v2.length());\n\n  }\n\n  /**\n   * @name Two.Vector.angleBetween\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Number} The angle between points `v1` and `v2`.\n   */\n  static angleBetween(v1, v2) {\n\n    if (arguments.length >= 4) {\n\n      const dx = arguments[0] - arguments[2];\n      const dy = arguments[1] - arguments[3];\n\n      return Math.atan2(dy, dx);\n\n    }\n\n    const dx = v1.x - v2.x;\n    const dy = v1.y - v2.y;\n\n    return Math.atan2(dy, dx);\n\n  }\n\n  /**\n   * @name Two.Vector.distanceBetween\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Number} The distance between points `v1` and `v2`. Distance is always positive.\n   */\n  static distanceBetween(v1, v2) {\n\n    return Math.sqrt(Vector.distanceBetweenSquared(v1, v2));\n\n  }\n\n  /**\n   * @name Two.Vector.distanceBetweenSquared\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Number} The squared distance between points `v1` and `v2`.\n   */\n  static distanceBetweenSquared(v1, v2) {\n\n    const dx = v1.x - v2.x;\n    const dy = v1.y - v2.y;\n\n    return dx * dx + dy * dy;\n\n  }\n\n  //\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#copy\n   * @function\n   * @param {Two.Vector} v\n   * @description Copy the x / y components of another object `v`.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#clear\n   * @function\n   * @description Set the x / y component values of the vector to zero.\n   */\n  clear() {\n    this.x = 0;\n    this.y = 0;\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#clone\n   * @function\n   * @description Create a new vector and copy the existing values onto the newly created instance.\n   */\n  clone() {\n    return new Vector(this.x, this.y);\n  }\n\n  /**\n   * @name Two.Vector#add\n   * @function\n   * @param {Two.Vector} v\n   * @description Add an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#add\n   * @function\n   * @param {Number} v\n   * @description Add the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#add\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @description Add `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  add(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x += x;\n        this.y += x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x += x.x;\n        this.y += x.y;\n      }\n    } else {\n      this.x += x;\n      this.y += y;\n    }\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#addSelf\n   * @function\n   * @description Alias for {@link Two.Vector.add}.\n   */\n  addSelf(v) {\n    return this.add.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Vector#sub\n   * @function\n   * @param {Two.Vector} v\n   * @description Subtract an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#sub\n   * @function\n   * @param {Number} v\n   * @description Subtract the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#sub\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @description Subtract `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  sub(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x -= x;\n        this.y -= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x -= x.x;\n        this.y -= x.y;\n      }\n    } else {\n      this.x -= x;\n      this.y -= y;\n    }\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#subtract\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subtract() {\n    return this.sub.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Vector#subSelf\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subSelf(v) {\n    return this.sub.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Vector#subtractSelf\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subtractSelf(v) {\n    return this.sub.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Vector#multiply\n   * @function\n   * @param {Two.Vector} v\n   * @description Multiply an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#multiply\n   * @function\n   * @param {Number} v\n   * @description Multiply the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#multiply\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @description Multiply `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  multiply(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x *= x;\n        this.y *= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x *= x.x;\n        this.y *= x.y;\n      }\n    } else {\n      this.x *= x;\n      this.y *= y;\n    }\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#multiplySelf\n   * @function\n   * @description Alias for {@link Two.Vector.multiply}.\n   */\n  multiplySelf(v) {\n    return this.multiply.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Vector#multiplyScalar\n   * @function\n   * @param {Number} s - The scalar to multiply by.\n   * @description Mulitiply the vector by a single number. Shorthand to call {@link Two.Vector#multiply} directly.\n   */\n  multiplyScalar(s) {\n    return this.multiply(s);\n  }\n\n  /**\n   * @name Two.Vector#divide\n   * @function\n   * @param {Two.Vector} v\n   * @description Divide an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#divide\n   * @function\n   * @param {Number} v\n   * @description Divide the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#divide\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @description Divide `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  divide(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x /= x;\n        this.y /= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x /= x.x;\n        this.y /= x.y;\n      }\n    } else {\n      this.x /= x;\n      this.y /= y;\n    }\n    if (isNaN(this.x)) {\n      this.x = 0;\n    }\n    if (isNaN(this.y)) {\n      this.y = 0;\n    }\n    return this;\n  }\n\n  /**\n   * @name Two.Vector#divideSelf\n   * @function\n   * @description Alias for {@link Two.Vector.divide}.\n   */\n  divideSelf(v) {\n    return this.divide.apply(this, arguments);\n  }\n\n  /**\n   * @name Two.Vector#divideScalar\n   * @function\n   * @param {Number} s - The scalar to divide by.\n   * @description Divide the vector by a single number. Shorthand to call {@link Two.Vector#divide} directly.\n   */\n  divideScalar(s) {\n    return this.divide(s);\n  }\n\n  /**\n   * @name Two.Vector#negate\n   * @function\n   * @description Invert each component's sign value.\n   */\n  negate() {\n    return this.multiply(-1);\n  }\n\n  /**\n   * @name Two.Vector#dot\n   * @function\n   * @returns {Number}\n   * @description Get the [dot product](https://en.wikipedia.org/wiki/Dot_product) of the vector.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * @name Two.Vector#length\n   * @function\n   * @returns {Number}\n   * @description Get the length of a vector.\n   */\n  length() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * @name Two.Vector#lengthSquared\n   * @function\n   * @returns {Number}\n   * @description Get the length of the vector to the power of two. Widely used as less expensive than {@link Two.Vector#length} because it isn't square-rooting any numbers.\n   */\n  lengthSquared() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  /**\n   * @name Two.Vector#normalize\n   * @function\n   * @description Normalize the vector from negative one to one.\n   */\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  /**\n   * @name Two.Vector#distanceTo\n   * @function\n   * @returns {Number}\n   * @description Get the distance between two vectors.\n   */\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  /**\n   * @name Two.Vector#distanceToSquared\n   * @function\n   * @returns {Number}\n   * @description Get the distance between two vectors to the power of two. Widely used as less expensive than {@link Two.Vector#distanceTo} because it isn't square-rooting any numbers.\n   */\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * @name Two.Vector#setLength\n   * @function\n   * @param {Number} l - length to set vector to.\n   * @description Set the length of a vector.\n   */\n  setLength(l) {\n    return this.normalize().multiplyScalar(l);\n  }\n\n  /**\n   * @name Two.Vector#equals\n   * @function\n   * @param {Two.Vector} v - The vector to compare against.\n   * @param {Number} [eps=0.0001] - An options epsilon for precision.\n   * @returns {Boolean}\n   * @description Qualify if one vector roughly equal another. With a margin of error defined by epsilon.\n   */\n  equals(v, eps) {\n    eps = (typeof eps === 'undefined') ?  0.0001 : eps;\n    return (this.distanceTo(v) < eps);\n  }\n\n  /**\n   * @name Two.Vector#lerp\n   * @function\n   * @param {Two.Vector} v - The destination vector to step towards.\n   * @param {Number} t - The zero to one value of how close the current vector gets to the destination vector.\n   * @description Linear interpolate one vector to another by an amount `t` defined as a zero to one number.\n   * @see [Matt DesLauriers](https://twitter.com/mattdesl/status/1031305279227478016) has a good thread about this.\n   */\n  lerp(v, t) {\n    const x = (v.x - this.x) * t + this.x;\n    const y = (v.y - this.y) * t + this.y;\n    return this.set(x, y);\n  }\n\n  /**\n   * @name Two.Vector#isZero\n   * @function\n   * @param {Number} [eps=0.0001] - Optional precision amount to check against.\n   * @returns {Boolean}\n   * @description Check to see if vector is roughly zero, based on the `epsilon` precision value.\n   */\n  isZero(eps) {\n    eps = (typeof eps === 'undefined') ?  0.0001 : eps;\n    return (this.length() < eps);\n  }\n\n  /**\n   * @name Two.Vector#toString\n   * @function\n   * @returns {String}\n   * @description Return a comma-separated string of x, y value. Great for storing in a database.\n   */\n  toString() {\n    return this.x + ', ' + this.y;\n  }\n\n  /**\n   * @name Two.Vector#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the vector.\n   */\n  toObject() {\n    return { x: this.x, y: this.y };\n  }\n\n  /**\n   * @name Two.Vector#rotate\n   * @function\n   * @param {Number} radians - The amount to rotate the vector by in radians.\n   * @description Rotate a vector.\n   */\n  rotate(radians) {\n    const x = this.x;\n    const y = this.y;\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n    this.x = x * cos - y * sin;\n    this.y = x * sin + y * cos;\n    return this;\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["dx", "dy"]
}
